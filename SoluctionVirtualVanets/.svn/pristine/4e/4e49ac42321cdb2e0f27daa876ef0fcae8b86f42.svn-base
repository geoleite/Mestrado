/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.virtualVanets.security;

import br.com.virtualVanets.common.security.ASecurityModel;
import br.com.virtualVanets.common.security.I9Key;
import java.io.File;
import java.security.Key;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import javax.crypto.Cipher;

/**
 *
 * @author geoleite
 */
public class I9Security extends ASecurityModel {
 
    
    /**
     * Verifica a assinatura da informação
     * @param pubKey
     * @param signature
     * @param data
     * @return
     * @throws Exception 
     */
    public boolean verifySign(PublicKey pubKey, byte[] signature, byte[] data) throws Exception {
        Signature sign = Signature.getInstance(I9Key.ALGORITHM_SIGN);
        sign.initVerify(pubKey);
        sign.update(data);
        return sign.verify(signature);
    }
    
    /**
     * Assina uma informação com a chave privada
     * @param privatekey
     * @param data
     * @return
     * @throws Exception 
     */
    public byte[] sign(PrivateKey privatekey, byte[] data) throws Exception {
        Signature signature = Signature.getInstance(I9Key.ALGORITHM_SIGN);
        signature.initSign(privatekey);
        signature.update(data);
        byte[] assinatura = signature.sign();
        return assinatura;
    }
    
    /**
     * Criptografa a informação com a chave que pode ser a pública ou a privada
     * @param key
     * @param data
     * @return 
     */
    public byte[] encrypt(Key key, byte[] data) {
        byte[] cipherText = null;
        try {
            final Cipher cipher = Cipher.getInstance(I9Key.ALGORITHM);
            // Criptografa o texto puro usando a chave Púlica
            cipher.init(Cipher.ENCRYPT_MODE, key);
            cipherText = cipher.doFinal(data);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cipherText;   
    }
    
    /**
     * Descriptografa uma informação com a chave que pode ser pública ou privada
     * @param key
     * @param data
     * @return 
     */
    public byte[]  decrypt(Key key, byte[] data) {
        byte[] dectyptedText = null;

        try {
            final Cipher cipher = Cipher.getInstance(I9Key.ALGORITHM);
            // Decriptografa o texto puro usando a chave Privada
            cipher.init(Cipher.DECRYPT_MODE, key);
            dectyptedText = cipher.doFinal(data);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return dectyptedText;
    }
    
    
    public static void main(String[] p) {
        try {
            I9Key i9Key = new I9Key();
            
            KeyPair kp = i9Key.createKeys();
            PrivateKey priK = kp.getPrivate();
            PublicKey pubK = kp.getPublic();
            File fPriK = new File("prik.txt");
            i9Key.saveKeyGenerate(priK, fPriK);
            File fPubK = new File("pubk.txt");
            i9Key.saveKeyGenerate(pubK, fPubK);
            priK = i9Key.loadPrivateKey(fPriK);
             
            //File fPriK = new File("private_key.der");
            //File fPubK = new File("public_key.der");
            //PrivateKey priK = i9Key.loadPrivateKey(fPriK);
            //PublicKey pubK = i9Key.loadPublicKey(fPubK);
            //System.out.println(priK.getFormat());

            String conteudo = "Projeto I9Vanets definindo a plataforma de Segurança";
            I9Security i9Security = new I9Security();
            byte[] assinatura = i9Security.sign(priK, conteudo.getBytes("UTF8"));
            System.out.println(new String(assinatura));
            boolean checaAssinatura = i9Security.verifySign(pubK, assinatura, conteudo.getBytes("UTF8"));
            System.out.println("checado: " + checaAssinatura);
            byte[] encriptado = i9Security.encrypt(pubK, conteudo.getBytes("UTF8"));
            byte[] decritptado = i9Security.decrypt(priK, encriptado);
            System.out.println(new String(decritptado));
            encriptado = i9Security.encrypt(priK, conteudo.getBytes("UTF8"));
            decritptado = i9Security.decrypt(pubK, encriptado);
            System.out.println(new String(decritptado));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }    
}
